// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadAoc returns the embedded CollectionSpec for aoc.
func loadAoc() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_AocBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load aoc: %w", err)
	}

	return spec, err
}

// loadAocObjects loads aoc and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*aocObjects
//	*aocPrograms
//	*aocMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadAocObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadAoc()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// aocSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type aocSpecs struct {
	aocProgramSpecs
	aocMapSpecs
}

// aocSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type aocProgramSpecs struct {
	Aoc06 *ebpf.ProgramSpec `ebpf:"aoc06"`
}

// aocMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type aocMapSpecs struct {
	AocMap *ebpf.MapSpec `ebpf:"aoc_map"`
}

// aocObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadAocObjects or ebpf.CollectionSpec.LoadAndAssign.
type aocObjects struct {
	aocPrograms
	aocMaps
}

func (o *aocObjects) Close() error {
	return _AocClose(
		&o.aocPrograms,
		&o.aocMaps,
	)
}

// aocMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadAocObjects or ebpf.CollectionSpec.LoadAndAssign.
type aocMaps struct {
	AocMap *ebpf.Map `ebpf:"aoc_map"`
}

func (m *aocMaps) Close() error {
	return _AocClose(
		m.AocMap,
	)
}

// aocPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadAocObjects or ebpf.CollectionSpec.LoadAndAssign.
type aocPrograms struct {
	Aoc06 *ebpf.Program `ebpf:"aoc06"`
}

func (p *aocPrograms) Close() error {
	return _AocClose(
		p.Aoc06,
	)
}

func _AocClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed aoc_bpfeb.o
var _AocBytes []byte
